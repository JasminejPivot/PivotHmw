package main

import (
	"crypto/md5"
	"encoding/hex"
	"encoding/json"
	"github.com/joho/godotenv"
	"github.com/spewerspew/spew"
	"log"
	"net/http"
	"os"
	"strconv"
	"time"
)

func main() {
	err := godotenv.Load()
	if err != nil {
		log.Fatal("Error loading .env file")
	}
	publicKey := os.Getenv("MARVEL_PUBLIC_KEY")
	privateKey := os.Getenv("MARVEL_PRIVATE_KEY")

	client := marvelCharacters{
		publicKey:  publicKey,
		privateKey: privateKey,
		httpClient: &http.Client{
			Timeout: 10 * time.Second,
		},
	}
	characters, err := client.getCharacters()
	if err != nil {
		log.Fatal(err)
	}
	spew.Dump(characters)
}

type marvelCharacters struct {
	publicKey  string
	privateKey string
	httpClient *http.Client
}

func (m *marvelCharacters) md5Hash(ts int64) string {
	tsForHash := strconv.Itoa(int(ts))
	hash := md5.Sum([]byte(tsForHash + m.privateKey + m.publicKey))
	return hex.EncodeToString(hash[:])
}

func (m *marvelCharacters) signRequest(url string) string {
	ts := time.Now().Unix()
	hash := m.md5Hash(ts)
	return hex.EncodeToString([]byte(hash[:]))
}

func (m *marvelCharacters) getCharacters() ([]Characters, error) {
	res, err := m.httpClient.Get("https://gateway.marvel.com:443/v1/public/characters?limit=5&apikey=6aab07bf785e7c843104b2d5d5604221")
	if err != nil {
		return nil, err
	}

	defer res.Body.Close()

	var characters Characters
	if err := json.NewDecoder(res.Body).Decode(&characters); err != nil {
		return nil, err
	}
	return nil, nil
}
